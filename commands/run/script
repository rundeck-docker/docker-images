#!/usr/bin/env bash

# To implement this command, edit the "Command implementation" section below. 

# Usage
# -----

# Comments prefixed with `#/` are managed by stubbs.
# The `command` and `usage` comments describe the command
# and show its options.
# 
#/ command: docker-image:run: "run a docker container from the specified image"
#/ usage: rerun docker-image:run [ --add-host <>] [ --blkio-weight <>] [ --cap-add <>] [ --cap-drop <>] [ --command <>] [ --cpu-period <>] [ --cpu-quota <>] [ --cpu-shares <>] [ --cpuset-cpus <>] [ --cpuset-mems <>] [ --detatch <false>] [ --device <>] [ --dns <>]  --docker-cert-path <${DOCKER_CERT_PATH:-}>  --docker-host <${DOCKER_HOST:-}>  --docker-tls-verify <${DOCKER_TLS_VERIFY:-}> [ --envOpts <>]  --image <> [ --ipc <>] [ --log-driver <json-file>] [ --log-opt <>] [ --lxc-conf <>] [ --memory <>] [ --memory-swap <>] [ --name <>] [ --net <bridge>] [ --oom-kill-disable <>] [ --privileged <false>] [ --publish <>] [ --restart <>] [ --rm <false>] [ --security-opt <>] [ --read-only <false>] [ --volume <>] [ --volumes-from <>] [ --ulimit <>] [ --uts <>] [ --label <>] [ --interactive <>] [ --tty <>] 

# Load common functions
# ---------------------

# Load the function library for this module.
# This loads rerun functions, too.
. $RERUN_MODULE_DIR/lib/functions.sh run || { 
  echo >&2 "Failed loading function library." ; exit 1 ; 
}

# Error handling
# ---------------

# This script is designed to _fail-fast_.

# Trap errors and exit. The call to `rerun_die` will print the
# the error message and exit with the error command exit status. 

trap 'rerun_die $? "*** command failed: docker-image:run. ***"' ERR

# Run [set] `nounset` to treat unset variables as errors. Set [pipefail]
# so a pipeline return status is the value of the last 
# (rightmost) command to exit with non-zero status.
#
# [set]: http://ss64.com/bash/set.html
# [pipefail]: http://www.gnu.org/software/bash/manual/html_node/Pipelines.html

set -o nounset -o pipefail

# Command variables
# -----------------

# This command script can access the following variables
# declared by `rerun` or by the option parser function.

#/ rerun-variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option-variables: ADD_HOST BLKIO_WEIGHT CAP_ADD CAP_DROP COMMAND CPU_PERIOD CPU_QUOTA CPU_SHARES CPUSET_CPUS CPUSET_MEMS DETATCH DEVICE DNS DOCKER_CERT_PATH DOCKER_HOST DOCKER_TLS_VERIFY ENVOPTS IMAGE IPC LOG_DRIVER LOG_OPT LXC_CONF MEMORY MEMORY_SWAP NAME NET OOM_KILL_DISABLE PRIVILEGED PUBLISH RESTART RM SECURITY_OPT READ_ONLY VOLUME VOLUMES_FROM ULIMIT UTS LABEL INTERACTIVE TTY

# The `rerun_options_parse` function processes the command line
# arguments. Each accepted command line flag results in setting 
# one the corresponding option variables.


#env|grep RD_ 

rerun_options_parse "$@"


# Command implementation
# ----------------------

# Set the docker command
: ${DOCKER_COMMAND:=docker}


[[ "$COMMAND" == '${option.command}' ]] && COMMAND=
[[ "$NAME" == '${option.name}' ]] && NAME=

# Construct the options for the `docker run` command:
: ${DETATCH:=false}

runOpts=(--detach=${DETATCH})

[[ -n "${ADD_HOST:-}" ]] && runOpts=(${runOpts[*]} --add-host=${ADD_HOST})
[[ -n "${BLKIO_WEIGHT:-}" ]] && runOpts=(${runOpts[*]} --blkio-weight=${BLKIO_WEIGHT})
[[ -n "${CAP_ADD:-}" ]] && runOpts=(${runOpts[*]} --cap-add=${CAP_ADD})
[[ -n "${CAP_DROP:-}" ]] && runOpts=(${runOpts[*]} --cap-drop=${CAP_DROP})
[[ -n "${CPU_SHARES:-}" ]] && runOpts=(${runOpts[*]} --cpu-shares=${CPU_SHARES})
[[ -n "${CPU_PERIOD:-}" ]] && runOpts=(${runOpts[*]} --cpu-period=${CPU_PERIOD})
[[ -n "${CPUSET_CPUS:-}" ]] && runOpts=(${runOpts[*]} --cpuset-cpus=${CPUSET_CPUS})
[[ -n "${CPUSET_MEMS:-}" ]] && runOpts=(${runOpts[*]} --cpuset-mems=${CPUSET_MEMS})
[[ -n "${CPU_QUOTA:-}" ]] && runOpts=(${runOpts[*]} --cpu-quota=${CPU_QUOTA})
[[ -n "${DEVICE:-}" ]] && runOpts=(${runOpts[*]} --device=${DEVICE})
[[ -n "${DNS:-}" ]] && runOpts=(${runOpts[*]} --dns=${DNS})
[[ -n "${IPC:-}" ]] && runOpts=(${runOpts[*]} --ipc=${IPC})
[[ -n "${LABEL:-}" ]] && runOpts=(${runOpts[*]} --label=${LABEL})
[[ -n "${LOG_DRIVER:-}" ]] && runOpts=(${runOpts[*]} --log-driver=${LOG_DRIVER})
[[ -n "${LOG_OPT:-}" ]] && runOpts=(${runOpts[*]} --log-opt=${LOG_OPT})
[[ -n "${LXC_CONF:-}" ]] && runOpts=(${runOpts[*]} --lxc-conf=${LXC_CONF})
[[ -n "${MEMORY:-}" ]] && runOpts=(${runOpts[*]} --memory=${MEMORY})
[[ -n "${MEMORY_SWAP:-}" ]] && runOpts=(${runOpts[*]} --memory-swap=${MEMORY_SWAP})
[[ -n "${NAME:-}" ]] && runOpts=(${runOpts[*]} --name=${NAME})
[[ -n "${NET:-}" ]] && runOpts=(${runOpts[*]} --net=${NET})
[[ -n "${OOM_KILL_DISABLE:-}" ]] && runOpts=(${runOpts[*]} --oom-kill-disable=${OOM_KILL_DISABLE})
[[ -n "${PUBLISH:-}" ]] && runOpts=(${runOpts[*]} --publish=${PUBLISH})
[[ -n "${PRIVILEGED:-}" ]] && runOpts=(${runOpts[*]} --privileged=${PRIVILEGED})
[[ -n "${READ_ONLY:-}" ]] && runOpts=(${runOpts[*]} --read-only=${READ_ONLY})
[[ -n "${RESTART:-}" ]] && runOpts=(${runOpts[*]} --restart=${RESTART})
[[ -n "${RM:-}" ]] && runOpts=(${runOpts[*]} --rm=${RM})
[[ -n "${VOLUME:-}" ]] && runOpts=(${runOpts[*]} --volume=${VOLUME})
[[ -n "${VOLUMES_FROM:-}" ]] && runOpts=(${runOpts[*]} --volume-from=${VOLUMES_FROM})
[[ -n "${ULIMIT:-}" ]] && runOpts=(${runOpts[*]} --ulimit=${ULIMIT})
[[ -n "${UTS:-}" ]] && runOpts=(${runOpts[*]} --uts=${UTS})
[[ -n "${INTERACTIVE:-}" ]] && runOpts=(${runOpts[*]} --interactive=${INTERACTIVE})
[[ -n "${TTY:-}" ]] && runOpts=(${runOpts[*]} --tty=${TTY})


set -- $ENVOPTS

IFS=","
for envar in $@
do
    runOpts=(${runOpts[*]:-} --env=$envar)
done

set -- $SECURITY_OPT

IFS=","
for secopt in $@
do
    runOpts=(${runOpts[*]:-} --security-opt=$secopt)
done




IFS=" "
set -- $COMMAND
# Execute the command
rerun_log info "executing: $DOCKER_COMMAND run ${runOpts[*]} ${IMAGE} $@"
$DOCKER_COMMAND run ${runOpts[*]} ${IMAGE} "$@"


# Done. Exit with last command exit status.
exit $?

